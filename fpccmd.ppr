program fpccmd;

{$mode objfpc}{$H+}

uses
  {$IFNDEF WINDOWS}
  cthreads,
  {$ENDIF}
  Classes, sysutils, process, untCfg, untCmdLinux, untCmdMac, untCmdWindows,
  untCompile, untAndroid, untEnvironment, untVersion, untUpdate,
  untCommandCommon, untFpcPod;

procedure writeHelp();
begin
  WriteLn('FPCCMD (by rarnu) Version: ' + getVersion());
  WriteLn('    matched CodeTyphon Version: 6.70+');
  WriteLn('    github: rarnu/fpccmd');
  WriteLn('');
  WriteLn('usage: fpccmd <command>');
  WriteLn('    init:        generate a fpccmd.cfg under your project');
  WriteLn('    reset:       change fpccmd.cfg to default');
  WriteLn('    update:      update fpccmd (you may need sudo for this)');
  WriteLn('    install-ios: install compile environment for iOS (you may need sudo for this)');
  WriteLn('    source:      show repository source');
  WriteLn('    set-source:  set repository source');
  WriteLn('');
  WriteLn('usage: fpccmd module <command>');
  WriteLn('    initdep:            generate dep.spec under your project for use 3rd-party modules');
  WriteLn('    initspec:           generate project.spec under your project for share the module');
  WriteLn('    get [module name]:  download and modify dependence module to your project, if module name is given, get that module only.');
  WriteLn('');
  WriteLn('usage: fpccmd <Platform> <main file> <ui type>');
  WriteLn(Format('    Platform: %s', [{$IFDEF WINDOWS}'W(Win64), A64(Android Arm64), AA(Android arm), AI(Android x86), AM(Android mips)'{$ELSE}{$IFDEF DARWIN}'M(Mac OSX), I(iOS)'{$ELSE}'L(Linux), A64(Android Arm64), AA(Android arm), AI(Android x86), AM(Android mips)'{$ENDIF}{$ENDIF}]));
  WriteLn(Format('    UIType: %s', [{$IFDEF WINDOWS}'W(Win64), O(Orca64)'{$ELSE}{$IFDEF DARWIN}'C(Cocoa64), O(Orca32)'{$ELSE}'G(Gtk64), O(Orca64)'{$ENDIF}{$ENDIF}]));
  WriteLn('    for other options, you may write a fpccmd.cfg under your project, it will lead the compile.');
  WriteLn('');
  WriteLn('usage: command before and after');
  WriteLn('    You may write a file named "fpccmd.before" or "fpccmd.after" to let fpccmd run some commands automatically.');
  WriteLn('    command supported list: cp, mv, rm, mkdir, no additional parameters supported.');
  WriteLn('    project macros supported list: ${PATH}, ${PROJ}');
  WriteLn('    platform macros supported list: ${ALL}, ${W}, ${M}, ${L}, ${AA}, ${AI}, ${AM}, ${I}');
  WriteLn('    uitype macro supported list: ${UNA}, ${UALL}, ${UW}, ${UC}, ${UG}, ${UO}');
  WriteLn('example: a command runs after compile only for Mac OSX');
  WriteLn('    ${M}${UNA} cp ${PATH}/libsample.dylib ${PATH}/${PROJ}.app/Contents/MacOS/libsample.dylib');
  WriteLn('');
end;

function isPlatformMatches(pt: String): Boolean;
const
  PTARR: array[0..{$IFDEF WINDOWS}4{$ELSE}{$IFDEF DARWIN}1{$ELSE}4{$ENDIF}{$ENDIF}] of string = ({$IFDEF WINDOWS}'W','A64','AA','AI','AM'{$ELSE}{$IFDEF DARWIN}'M','I'{$ELSE}'L','A64','AA','AI','AM'{$ENDIF}{$ENDIF});
var
  s: string;
  match: Boolean = False;
begin
  for s in PTARR do begin
    if (s = pt) then begin
      match:= True;
      Break;
    end;
  end;
  Exit(match);
end;

function isUITypeMatches(ui: string): Boolean;
const
  UIARR: array[0..1] of string = ({$IFDEF WINDOWS}'W', 'O'{$ELSE}{$IFDEF DARWIN}'C', 'O'{$ELSE}'G', 'O'{$ENDIF}{$ENDIF});
var
  s: string;
  match: Boolean = False;
begin
  for s in UIARR do begin
    if (s = ui) then begin
      match:= True;
      Break;
    end;
  end;
  Exit(match);
end;

var
  opt: string;
  src: string;
  pt: string;
  ui: string;
  mainFile: string = '';
  moduleOpt: string;
begin
  opt := ParamStr(1);
  if (opt = 'init') then begin
    initCfg(True);
  end else if (opt = 'reset') then begin
    initCfg(False);
  end else if (opt = 'update') then begin
    updateSelf();
  end else if (opt = 'install-ios') then begin
    {$IFDEF DARWIN}
    installIOSEnvironment();
    {$ELSE}
    WriteLn('please run this command under Mac OSX.');
    {$ENDIF}
  end else if (opt = 'source') then begin
    WriteLn(getSource());
  end else if (opt = 'set-source') then begin
    src := ParamStr(2);
    setSource(src);
  end else if (opt = 'module') then begin
    moduleOpt:= ParamStr(2);
    if (moduleOpt = 'initdep') then begin
      moduleInitDep();
    end else if (moduleOpt = 'initspec') then begin
      moduleInitSpec();
    end else if (moduleOpt = 'get') then begin
      moduleGet(ParamStr(3));
    end else begin
      writeHelp();
    end;
  end else begin
    // compile
    pt:= ParamStr(1);
    mainFile:= ParamStr(2);
    ui := ParamStr(3);
    if (pt = '') or (mainFile = '' ) then begin
      writeHelp();
      Exit;
    end;
    if (not isPlatformMatches(pt)) then begin
      writeHelp();
      Exit;
    end;
    if (ui <> '') and (not isUITypeMatches(ui)) then begin
      writeHelp();
      Exit;
    end;
    // before
    commandsBefore(mainFile, pt, ui);
    if (ui = '') then begin
      {$IFDEF WINDOWS}
      doCompileWindows(pt, mainFile);
      {$ELSE}
        {$IFDEF DARWIN}
        doCompileMac(pt, mainFile);
        {$ELSE}
        doCompileLinux(pt, mainFile);
        {$ENDIF}
      {$ENDIF}
    end else begin
      {$IFDEF WINDOWS}
      doCompileWindowsUI(mainFile, ui);
      {$ELSE}
        {$IFDEF DARWIN}
        doCompileMacUI(mainFile, ui);
        doCreateMacBundle(mainFile);
        {$ELSE}
        doCompileLinuxUI(mainFile, ui);
        {$ENDIF}
      {$ENDIF}
    end;
    // after
    commandsAfter(mainFile, pt, ui);
  end;

end.

